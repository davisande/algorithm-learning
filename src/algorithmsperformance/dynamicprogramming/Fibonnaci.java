package algorithmsperformance.dynamicprogramming;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Fibonnaci {

//    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
//            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms


    public static void main(String[] args) {

        List<Integer> listNumbers = new ArrayList<>();
        listNumbers.add(1);
        listNumbers.add(2);
        Long maximum = 4_000_000L;


        while(listNumbers.get(listNumbers.size() - 1) < maximum) {
            int currentIndex = listNumbers.size() - 1;
            listNumbers.add(listNumbers.get(currentIndex - 1) + listNumbers.get(currentIndex));
        }

        listNumbers.remove(listNumbers.size() - 1);


        BigDecimal amount = listNumbers.stream()
                .filter(number -> number % 2 == 0)
                .map(BigDecimal::new)
                .reduce(BigDecimal::add)
                .orElse(BigDecimal.ZERO);

        System.out.println(amount);

    }


}
